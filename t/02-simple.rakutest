use Test;
use rak;

plan 11;

my $dir := $*TMPDIR.add("rak");
my @targets  := <zero one two three four five six seven eight nine>;
my %name2path = @targets.map: { $_ => $dir.add($_).absolute }
my %path2name = %name2path.kv.reverse;

$dir.mkdir;
for @targets.kv -> $n, $name {
    %name2path{$name}.IO.spurt: @targets[0..$n].join("\n")
}
LEAVE { .IO.unlink for %name2path.values; $dir.rmdir }

# Line locations and their contents for matches
my \l0 = PairMatched.new:  1, "zero";
my \L0 = PairMatched.new:  1, "ZERO";
my \l1 = PairMatched.new:  2, "one";
my \l2 = PairMatched.new:  3, "two";
my \L2 = PairMatched.new:  3, "TWO";
my \l3 = PairMatched.new:  4, "three";
my \l4 = PairMatched.new:  5, "four";
my \l5 = PairMatched.new:  6, "five";
my \l6 = PairMatched.new:  7, "six";
my \l7 = PairMatched.new:  8, "seven";
my \l8 = PairMatched.new:  9, "eight";
my \l9 = PairMatched.new: 10, "nine";

# Line locations and their contents for contexts
my \c0 = PairContext.new:  1, "zero";
my \c1 = PairContext.new:  2, "one";
my \c2 = PairContext.new:  3, "two";
my \c3 = PairContext.new:  4, "three";
my \c4 = PairContext.new:  5, "four";
my \c5 = PairContext.new:  6, "five";
my \c6 = PairContext.new:  7, "six";
my \c7 = PairContext.new:  8, "seven";
my \c8 = PairContext.new:  9, "eight";
my \c9 = PairContext.new: 10, "nine";

my sub lookup(
  $pattern, *@expected, *%additional
) is test-assertion {
    my $code   := try $pattern.EVAL;
    my &needle := $code // *.contains($pattern);
    my %expected = @expected.map: { %name2path{.key} => .value }

    subtest "testing '$pattern'" => {
        plan 2;
        my %got = (rak &needle, :degree(1), |%additional).map: {
            .key => .value.List if .value.elems
        }

        is %got.elems, %expected.elems, "did we get %expected.elems() results";
        is-deeply %got, %expected, 'is the search result ok';
    }
}

lookup "nine", :paths($dir),
  "nine" => (l9,)
;

lookup "eight", :paths($dir),
  "eight" => (l8,),
  "nine"  => (l8,),
;

lookup "/ zero /", :paths($dir),
  "zero"  => (l0,),
  "one"   => (l0,),
  "two"   => (l0,),
  "three" => (l0,),
  "four"  => (l0,),
  "five"  => (l0,),
  "six"   => (l0,),
  "seven" => (l0,),
  "eight" => (l0,),
  "nine"  => (l0,),
;

lookup '*.ends-with("o")', :paths($dir),
  "zero"  => (l0,),
  "one"   => (l0,),
  "two"   => (l0, l2),
  "three" => (l0, l2),
  "four"  => (l0, l2),
  "five"  => (l0, l2),
  "six"   => (l0, l2),
  "seven" => (l0, l2),
  "eight" => (l0, l2),
  "nine"  => (l0, l2),
;

lookup '-> $_ { .ends-with("o") && .uc }', :paths($dir),
  "zero"  => (L0,),
  "one"   => (L0,),
  "two"   => (L0, L2),
  "three" => (L0, L2),
  "four"  => (L0, L2),
  "five"  => (L0, L2),
  "six"   => (L0, L2),
  "seven" => (L0, L2),
  "eight" => (L0, L2),
  "nine"  => (L0, L2),
;

lookup "/ er /", :sources(%name2path<nine>),
  "nine"  => (l0,),
;

lookup "/ zer /", :sources(%name2path<eight nine>),
  "eight" => (l0,),
  "nine"  => (l0,),
;

lookup "four", :sources(%name2path<nine>), :context(2),
  "nine"  => (c2, c3, l4, c5, c6),
;

lookup "/ four /", :sources(%name2path<nine>), :before-context(2),
  "nine"  => (c2, c3, l4),
;

lookup "/ fou /", :sources(%name2path<nine>), :after-context(2),
  "nine"  => (l4, c5, c6),
;

lookup "/ our /", :sources(%name2path<nine>), :paragraph-context,
  "nine"  => (c0, c1, c2, c3, l4, c5, c6, c7, c8, c9),
;

# vim: expandtab shiftwidth=4
